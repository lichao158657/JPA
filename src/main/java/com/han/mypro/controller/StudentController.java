package com.han.mypro.controller;import com.han.mypro.entity.Student;import com.han.mypro.service.StudentService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.RedisSerializer;import org.springframework.data.redis.serializer.StringRedisSerializer;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import java.util.Date;import java.util.Optional;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;@Controllerpublic class StudentController extends BaseController{    @Autowired    private StudentService studentService;    @Autowired    private RedisTemplate<Object,Object> redisTemplate;    @GetMapping("/findById")    @ResponseBody    public String findById(@RequestParam Long id){        String stuKey="student"+id;        /*key序列号字符串 增加可读性*/        RedisSerializer redisSerializer=new StringRedisSerializer();        redisTemplate.setKeySerializer(redisSerializer);//        Student student  = studentService.findById(id).get();//        System.out.println(student.toString());        Student student;        //查询redis        student = (Student) redisTemplate.opsForValue().get(stuKey);//        if(null == student){//            synchronized (this){//                student = (Student) redisTemplate.opsForValue().get(stuKey);//                if(null == student){//                    student  = studentService.findById(id).get();//                    //更新缓存//                    redisTemplate.opsForValue().set(stuKey,student);//                }//            }//        }        if(student == null){            System.out.println("查询数据库....");            student  = studentService.findById(id).get();            redisTemplate.opsForValue().set(stuKey,student);        }else {            System.out.println("缓存....");        }//        System.out.println(student.toString());        return student.toString();    }    @GetMapping("/saveStudent")    public String saveStudent(){        Student student = new Student();        student.setAge(18);        student.setName("李二");        student.setJoinDate(new Date());        studentService.save(student);        return "hello";    }    @GetMapping("/testFind")    public String testFind(){        Long l = Long.valueOf(5);        Runnable runnable = new Runnable() {            @Override            public void run() {                String result = findById(l);            }        };        //多线程测试        ExecutorService executorService = Executors.newFixedThreadPool(25);        for (int i=0; i<100; i++){            executorService.submit(runnable);        }        return "hello";    }//    @GetMapping("/upDate")//    public String upDate（）{//        studentService.upDate();//    }    @GetMapping("/updateStudent")    public String updateStudent() throws CloneNotSupportedException {        Optional<Student> optional =studentService.findById(Long.valueOf(6));        Student stu1=optional.get();        Student student = new Student();        student=stu1.clone();        System.out.println(stu1.getName());        student.setName("李明明");        System.out.println("克隆完毕");        System.out.println(stu1.getName());        System.out.println(student.getName());//        student.setId(Long.valueOf(5));//        student.setName("李明明");//        student.setAge(50);//        studentService.save(student);        return "";    }    @GetMapping("/deleteStudent")    public void deleteStudent(){       /* Optional<Student> optional =studentService.findById(Long.valueOf(6));        Student student=optional.get();*/        studentService.deleteById(Long.valueOf(5));    }}